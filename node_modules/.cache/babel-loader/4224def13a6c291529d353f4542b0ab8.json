{"ast":null,"code":"import _objectSpread from \"/Users/nataly.jingwen.sun/Desktop/BCNataly/HWs/clicky/clickygame/clicky-game/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/nataly.jingwen.sun/Desktop/BCNataly/HWs/clicky/clickygame/clicky-game/src/components/Game/index.js\";\nimport React, { Component } from \"react\";\nimport data from \"../../data.json\";\nimport Nav from \"../Nav\";\nimport Container from \"../Container\";\nimport Clicky from \"../Clicky\";\nimport Header from \"../Header\";\nimport Footer from \"../Footer\";\n\nclass Game extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data,\n      score: 0,\n      topScore: 0\n    };\n\n    this.reset = data => {\n      const reset = data.map(item => _objectSpread({}, item, {\n        clicked: false\n      }));\n      return this.shuffle(reset);\n    };\n\n    this.incorrectGuess = data => {\n      this.setState({\n        data: this.reset(data),\n        score: 0\n      });\n    };\n\n    this.correctGuess = newData => {\n      const _this$state = this.state,\n            topScore = _this$state.topScore,\n            score = _this$state.score;\n      const newScore = score + 1;\n      const newTopScore = Math.max(newScore, topScore);\n      this.setState({\n        data: this.shuffle(newData),\n        score: newScore,\n        topScore: newTopScore\n      });\n    };\n\n    this.shuffle = data => {\n      let i = data.length - 1;\n\n      while (i > 0) {\n        const k = Math.floor(Math.random() * (i + 1));\n        const temp = data[i];\n        data[i] = data[k];\n        data[k] = temp;\n        i--;\n      }\n\n      return data;\n    };\n\n    this.itemClick = id => {\n      let guessCorrect = false;\n      const newData = this.state.data.map(item => {\n        const newImage = _objectSpread({}, item);\n\n        if (newImage.id === id) {\n          if (!newImage.clicked) {\n            newImage.clicked = true;\n            guessCorrect = true;\n          }\n        }\n\n        return newImage;\n      });\n      guessCorrect ? this.correctGuess(newData) : this.incorrectGuess(newData);\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      data: this.shuffle(this.state.data)\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(Nav, {\n      score: this.state.score,\n      topScore: this.state.topScore,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }), React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, this.state.data.map(item => React.createElement(Clicky, {\n      key: item.id,\n      id: item.id,\n      shake: !this.state.score && this.state.topScore,\n      handleClick: this.itemClick,\n      image: item.image,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }))), React.createElement(Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/Users/nataly.jingwen.sun/Desktop/BCNataly/HWs/clicky/clickygame/clicky-game/src/components/Game/index.js"],"names":["React","Component","data","Nav","Container","Clicky","Header","Footer","Game","state","score","topScore","reset","map","item","clicked","shuffle","incorrectGuess","setState","correctGuess","newData","newScore","newTopScore","Math","max","i","length","k","floor","random","temp","itemClick","id","guessCorrect","newImage","componentDidMount","render","image"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport data from \"../../data.json\";\nimport Nav from \"../Nav\";\nimport Container from \"../Container\";\nimport Clicky from \"../Clicky\";\nimport Header from \"../Header\";\nimport Footer from \"../Footer\";\n\nclass Game extends Component {\n  state = {\n    data,\n    score: 0,\n    topScore: 0\n  };\n\n  componentDidMount() {\n    this.setState({ data: this.shuffle(this.state.data) });\n  }\n\n  reset = data => {\n    const reset = data.map(item => ({ ...item, clicked: false }));\n    return this.shuffle(reset);\n  };\n\n  incorrectGuess = data => {\n    this.setState({\n      data: this.reset(data),\n      score: 0\n    });\n  };\n\n  correctGuess = newData => {\n    const { topScore, score } = this.state;\n    const newScore = score + 1;\n    const newTopScore = Math.max(newScore, topScore);\n\n    this.setState({\n      data: this.shuffle(newData),\n      score: newScore,\n      topScore: newTopScore\n    });\n  };\n\n  shuffle = data => {\n    let i = data.length - 1;\n    while (i > 0) {\n      const k = Math.floor(Math.random() * (i + 1));\n      const temp = data[i];\n      data[i] = data[k];\n      data[k] = temp;\n      i--;\n    }\n    return data;\n  };\n\n  itemClick = id => {\n    let guessCorrect = false;\n    const newData = this.state.data.map(item => {\n      const newImage = { ...item };\n      if (newImage.id === id) {\n        if (!newImage.clicked) {\n          newImage.clicked = true;\n          guessCorrect = true;\n        }\n      }\n      return newImage;\n    });\n    guessCorrect\n      ? this.correctGuess(newData)\n      : this.incorrectGuess(newData);\n  };\n\n  render() {\n    return (\n      <div>\n        <Nav score={this.state.score} topScore={this.state.topScore} />\n        <Header />\n        <Container>\n          {this.state.data.map(item => (\n            <Clicky\n              key={item.id}\n              id={item.id}\n              shake={!this.state.score && this.state.topScore}\n              handleClick={this.itemClick}\n              image={item.image}/>\n          ))}\n        </Container>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}